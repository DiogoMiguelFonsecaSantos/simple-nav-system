/*
 * spi_hal.h
 *
 *  Created on: 25/04/2025
 *      Author: Diogo
 */

#ifndef COMPONENTS_MYHAL_INC_SPI_HAL_H_
#define COMPONENTS_MYHAL_INC_SPI_HAL_H_

#include <stdint.h>
#include <stdbool.h>
#include "regs_spi_controller.h"

void SPI_HAL_TriggerOperation(GenericSPI_Type *SPIx);
bool SPI_HAL_IsBusy(GenericSPI_Type *SPIx);


void SPI_HAL_SetAddress(GenericSPI_Type *SPIx, uint32_t address);
uint32_t SPI_HAL_GetAddress(GenericSPI_Type *SPIx);


void SPI_HAL_SetWriteBitOrder(GenericSPI_Type *SPIx, bool lsbFirst);
void SPI_HAL_SetReadBitOrder(GenericSPI_Type *SPIx, bool lsbFirst);
void SPI_HAL_EnableFourLineMode(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableTwoLineMode(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_SetWriteProtection(GenericSPI_Type *SPIx, bool high);
void SPI_HAL_EnableFourLineDataRead(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableTwoLineDataRead(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_GetWriteBitOrder(GenericSPI_Type *SPIx);
bool SPI_HAL_GetReadBitOrder(GenericSPI_Type *SPIx);
bool SPI_HAL_IsFourLineModeEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsTwoLineModeEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_GetWriteProtection(GenericSPI_Type *SPIx);
bool SPI_HAL_IsFourLineDataReadEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsTwoLineDataReadEnabled(GenericSPI_Type *SPIx);


void SPI_HAL_SetMosiDelayNum(GenericSPI_Type *SPIx, uint8_t delayNum);
void SPI_HAL_SetMosiDelayMode(GenericSPI_Type *SPIx, uint8_t delayMode);
void SPI_HAL_SetMisoDelayNum(GenericSPI_Type *SPIx, uint8_t delayNum);
void SPI_HAL_SetMisoDelayMode(GenericSPI_Type *SPIx, uint8_t delayMode);
void SPI_HAL_SetCsHoldTime(GenericSPI_Type *SPIx, uint8_t holdTime);
void SPI_HAL_SetCsSetupTime(GenericSPI_Type *SPIx, uint8_t setupTime);
uint8_t SPI_HAL_GetMosiDelayNum(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetMosiDelayMode(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetMisoDelayNum(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetMisoDelayMode(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetCsHoldTime(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetCsSetupTime(GenericSPI_Type *SPIx);
void SPI_HAL_SetClockEqualSysClock(GenericSPI_Type *SPIx, bool equalSysClock);
void SPI_HAL_SetClockPreDivider(GenericSPI_Type *SPIx, uint8_t preDivider);
void SPI_HAL_SetClockDivider(GenericSPI_Type *SPIx, uint8_t divider);
void SPI_HAL_SetClockHighLow(GenericSPI_Type *SPIx, uint8_t clkcntN);
bool SPI_HAL_IsClockEqualSysClock(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetClockPreDivider(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetClockDivider(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetClockHigh(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetClockLow(GenericSPI_Type *SPIx);
void SPI_HAL_EnableCommandPhase(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableAddressPhase(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableDummyPhase(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableReadPhase(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableWritePhase(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableDummyIdle(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableMosiHighPart(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableMisoHighPart(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_SetWriteByteOrder(GenericSPI_Type *SPIx, bool bigEndian);
void SPI_HAL_SetReadByteOrder(GenericSPI_Type *SPIx, bool bigEndian);
void SPI_HAL_SetClockOutEdge(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_SetClockInEdge(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableCsSetupDelay(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableCsHoldDelay(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_EnableFullDuplex(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsCommandPhaseEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsAddressPhaseEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsDummyPhaseEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsReadPhaseEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsWritePhaseEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsDummyIdleEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsMosiHighPartEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsMisoHighPartEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsWriteByteOrderBigEndian(GenericSPI_Type *SPIx);
bool SPI_HAL_IsReadByteOrderBigEndian(GenericSPI_Type *SPIx);
bool SPI_HAL_IsClockOutEdgeEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsClockInEdgeEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsCsSetupDelayEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsCsHoldDelayEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsFullDuplexEnabled(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetAddressBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetDummyCycleLength(GenericSPI_Type *SPIx, uint8_t cycleLength);
uint8_t SPI_HAL_GetDummyCycleLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetCommandBitLength(GenericSPI_Type *SPIx, uint8_t bitLength);
uint8_t SPI_HAL_GetCommandBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetCommandValue(GenericSPI_Type *SPIx, uint16_t commandValue);
uint16_t SPI_HAL_GetCommandValue(GenericSPI_Type *SPIx);
void SPI_HAL_SetMosiDataBitLength(GenericSPI_Type *SPIx, uint32_t bitLength);
uint32_t SPI_HAL_GetMosiDataBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetMisoDataBitLength(GenericSPI_Type *SPIx, uint32_t bitLength);
uint32_t SPI_HAL_GetMisoDataBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetSlaveWriteStatus(GenericSPI_Type *SPIx, uint32_t status);
uint32_t SPI_HAL_GetSlaveWriteStatus(GenericSPI_Type *SPIx);
void SPI_HAL_SetCsKeepActive(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsCsKeepActiveEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetClockIdleEdge(GenericSPI_Type *SPIx, bool highIdle);
bool SPI_HAL_IsClockIdleHigh(GenericSPI_Type *SPIx);
void SPI_HAL_SetCs2Enabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsCs2Enabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetCs1Enabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsCs1Enabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetCs0Enabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsCs0Enabled(GenericSPI_Type *SPIx);
void SPI_HAL_ResetSync(GenericSPI_Type *SPIx);
void SPI_HAL_SetSlaveMode(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsSlaveMode(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteReadBufferEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteReadBufferEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteReadStatusEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteReadStatusEnabled(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetTransactionCount(GenericSPI_Type *SPIx);
uint8_t SPI_HAL_GetLastState(GenericSPI_Type *SPIx);
void SPI_HAL_SetTransactionDoneInterrupt(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsTransactionDoneInterruptEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteStatusInterrupt(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteStatusInterruptEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadStatusInterrupt(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsReadStatusInterruptEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteBufferInterrupt(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteBufferInterruptEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadBufferInterrupt(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsReadBufferInterruptEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsTransactionDone(GenericSPI_Type *SPIx);
void SPI_HAL_ClearTransactionDone(GenericSPI_Type *SPIx);
bool SPI_HAL_IsWriteStatusDone(GenericSPI_Type *SPIx);
void SPI_HAL_ClearWriteStatusDone(GenericSPI_Type *SPIx);
bool SPI_HAL_IsReadStatusDone(GenericSPI_Type *SPIx);
void SPI_HAL_ClearReadStatusDone(GenericSPI_Type *SPIx);
bool SPI_HAL_IsWriteBufferDone(GenericSPI_Type *SPIx);
void SPI_HAL_ClearWriteBufferDone(GenericSPI_Type *SPIx);
bool SPI_HAL_IsReadBufferDone(GenericSPI_Type *SPIx);
void SPI_HAL_ClearReadBufferDone(GenericSPI_Type *SPIx);
void SPI_HAL_SetSlaveStatusBitLength(GenericSPI_Type *SPIx, uint8_t bitLength);
uint8_t SPI_HAL_GetSlaveStatusBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetSlaveReadAddressBitLength(GenericSPI_Type *SPIx, uint8_t bitLength);
uint8_t SPI_HAL_GetSlaveReadAddressBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetSlaveWriteAddressBitLength(GenericSPI_Type *SPIx, uint8_t bitLength);
uint8_t SPI_HAL_GetSlaveWriteAddressBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteStatusDummyEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteStatusDummyEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadStatusDummyEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsReadStatusDummyEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteBufferDummyEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsWriteBufferDummyEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadBufferDummyEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsReadBufferDummyEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteBufferDummyCycleLength(GenericSPI_Type *SPIx, uint8_t cycleLength);
uint8_t SPI_HAL_GetWriteBufferDummyCycleLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadBufferDummyCycleLength(GenericSPI_Type *SPIx, uint8_t cycleLength);
uint8_t SPI_HAL_GetReadBufferDummyCycleLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteStatusDummyCycleLength(GenericSPI_Type *SPIx, uint8_t cycleLength);
uint8_t SPI_HAL_GetWriteStatusDummyCycleLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadStatusDummyCycleLength(GenericSPI_Type *SPIx, uint8_t cycleLength);
uint8_t SPI_HAL_GetReadStatusDummyCycleLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetWriteBufferDataBitLength(GenericSPI_Type *SPIx, uint32_t bitLength);
uint32_t SPI_HAL_GetWriteBufferDataBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadBufferDataBitLength(GenericSPI_Type *SPIx, uint32_t bitLength);
uint32_t SPI_HAL_GetReadBufferDataBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetReadDataBitLength(GenericSPI_Type *SPIx, uint32_t bitLength);
uint32_t SPI_HAL_GetReadDataBitLength(GenericSPI_Type *SPIx);
void SPI_HAL_SetDataBuffer(GenericSPI_Type *SPIx, uint8_t index, uint32_t value);
uint32_t SPI_HAL_GetDataBuffer(GenericSPI_Type *SPIx, uint8_t index);
uint8_t SPI_HAL_GetState(GenericSPI_Type *SPIx);
bool SPI_HAL_IsState(GenericSPI_Type *SPIx, uint8_t state);
void SPI_HAL_SetDmaContinue(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsDmaContinueEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetDmaTxStop(GenericSPI_Type *SPIx, bool stop);
void SPI_HAL_SetDmaRxStop(GenericSPI_Type *SPIx, bool stop);
void SPI_HAL_SetOutDataBurstEnabled(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsOutDataBurstEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetInDescriptorBurstEnabled(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_SetOutDescriptorBurstEnabled(GenericSPI_Type *SPIx, bool enable);
void SPI_HAL_SetOutEofMode(GenericSPI_Type *SPIx, bool mode);
void SPI_HAL_ResetAhbMaster(GenericSPI_Type *SPIx);
void SPI_HAL_ResetAhbMasterFifo(GenericSPI_Type *SPIx);
void SPI_HAL_ResetOutFsm(GenericSPI_Type *SPIx);
void SPI_HAL_ResetInFsm(GenericSPI_Type *SPIx);
void SPI_HAL_SetOutlinkRestart(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsOutlinkRestartEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetOutlinkStart(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsOutlinkStartEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetOutlinkStop(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsOutlinkStopEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetOutlinkAddress(GenericSPI_Type *SPIx, uint32_t address);
uint32_t SPI_HAL_GetOutlinkAddress(GenericSPI_Type *SPIx);
void SPI_HAL_SetInlinkRestart(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsInlinkRestartEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetInlinkStart(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsInlinkStartEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetInlinkStop(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsInlinkStopEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetInlinkAutoRet(GenericSPI_Type *SPIx, bool enable);
bool SPI_HAL_IsInlinkAutoRetEnabled(GenericSPI_Type *SPIx);
void SPI_HAL_SetInlinkAddress(GenericSPI_Type *SPIx, uint32_t address);
uint32_t SPI_HAL_GetInlinkAddress(GenericSPI_Type *SPIx);
bool SPI_HAL_IsDmaWriteEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsDmaReadEnabled(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutTotalEofInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutEofInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutDoneInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInSucEofInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInErrEofInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInDoneInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInlinkDscrErrorInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutlinkDscrErrorInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInlinkDscrEmptyInterruptRaw(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutTotalEofInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutEofInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutDoneInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInSucEofInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInErrEofInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInDoneInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInlinkDscrErrorInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsOutlinkDscrErrorInterruptMasked(GenericSPI_Type *SPIx);
bool SPI_HAL_IsInlinkDscrEmptyInterruptMasked(GenericSPI_Type *SPIx);
void SPI_HAL_ClearOutTotalEofInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearOutEofInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearOutDoneInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearInSucEofInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearInErrEofInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearInDoneInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearInlinkDscrErrorInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearOutlinkDscrErrorInterrupt(GenericSPI_Type *SPIx);
void SPI_HAL_ClearInlinkDscrEmptyInterrupt(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetInErrEofDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetInSucEofDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetCurrentInlinkDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetNextInlinkDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetNextInlinkDataBufferAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetOutEofBufferDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetOutEofDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetCurrentOutlinkDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetNextOutlinkDescriptorAddress(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetNextOutlinkDataBufferAddress(GenericSPI_Type *SPIx);
bool SPI_HAL_IsTxFifoEmpty(GenericSPI_Type *SPIx);
bool SPI_HAL_IsTxFifoFull(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetTxDescriptorAddress(GenericSPI_Type *SPIx);
bool SPI_HAL_IsRxFifoEmpty(GenericSPI_Type *SPIx);
bool SPI_HAL_IsRxFifoFull(GenericSPI_Type *SPIx);
uint32_t SPI_HAL_GetRxDescriptorAddress(GenericSPI_Type *SPIx);

#endif /* COMPONENTS_MYHAL_INC_SPI_HAL_H_ */
